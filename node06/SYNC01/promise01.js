console.log("開始");


setTimeout(()=>{
    console.log("事件進行中,setTimeout 非同步結果");
} ,0);


console.log("結束");

//"開始"
//"結束"
//"事件進行中,setTimeout 非同步結果"

//在 JavaScript 中，setTimeout 函式是非同步的。當程式執行到 setTimeout 時，它會將指定的程式碼放入事件佇列中，並繼續執行後續的程式碼。
//事件佇列（Event Queue）是一種用於處理非同步事件的機制。當程式執行時，如果遇到非同步的任務（例如定時器、網路請求等），這些任務會被放入事件佇列中，並在主執行緒空閒時被依序執行。 事件佇列遵循先進先出的原則，也就是說先進入佇列的任務會先被執行。這意味著在一段程式碼中，如果有多個非同步任務，它們不會立即執行，而是等待主執行緒處理完畢後才進行執行。 
//在上面的程式碼範例中，setTimeout 函式被設定為非同步的，並且時間設定為 0 毫秒。這表示該任務會被放入事件佇列中，但不會立即執行。因此，在程式碼執行到 setTimeout 時，它會將 "事件進行中,setTimeout 非同步結果" 放入事件佇列中，並繼續執行後續的程式碼。當主執行緒空閒時，才會從事件佇列中取出該任務並執行，最終印出 "事件進行中,setTimeout 非同步結果"。 
